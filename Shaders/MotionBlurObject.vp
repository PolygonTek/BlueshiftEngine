in vec4 in_position : POSITION;
in vec3 in_normal : NORMAL;
in vec2 in_st : TEXCOORD0;

out vec2 v2f_texCoord;
out vec4 v2f_clipCoord;
out vec4 v2f_motionVec;
out vec4 v2f_motionVecPrev;

uniform vec4 textureMatrixS;
uniform vec4 textureMatrixT;
uniform HIGHP mat4 modelViewMatrix;
uniform HIGHP mat4 modelViewProjectionMatrix;

uniform HIGHP mat4 prevModelViewProjectionMatrix;	// currProjM * currViewM * prevModelM
uniform HIGHP mat4 prevModelViewMatrix;			// currViewM * prevModelM

//#define STRETCH_VERTEX

void main() {
	vec4 localPos;
	vec4 localPosPrev;
	vec3 localNormal;

#ifdef COMPRESSED_VERTEX_NORMAL_TANGENTS
	vec3 vNormal = in_normal.xyz * 2.0 - 1.0;
#else
	vec3 vNormal = in_normal.xyz;
#endif

#ifdef GPU_SKINNING
	skinningMatrix(in_position, localPos, vNormal, localNormal);
	skinningPrevMatrix(in_position, localPosPrev);
#else
	localPos = in_position;
	localNormal = vNormal;
	localPosPrev = in_position;
#endif

#ifdef STRETCH_VERTEX
	vec4 P = modelViewMatrix * localPos;
	vec4 Pprev = prevModelViewMatrix * localPosPrev;

	vec3 viewNormal = mat3(modelViewMatrix) * localNormal;
	vec3 motionVector = P.xyz - Pprev.xyz;

	v2f_motionVec = modelViewProjectionMatrix * localPos;
	v2f_motionVecPrev = prevModelViewProjectionMatrix * localPosPrev;

	gl_Position = dot(motionVector, viewNormal) > 0.0 ? v2f_motionVec : v2f_motionVecPrev;
#else
	v2f_motionVec = modelViewProjectionMatrix * localPos;
	v2f_motionVecPrev = prevModelViewProjectionMatrix * localPosPrev;

	gl_Position = v2f_motionVec;
#endif

	v2f_clipCoord = gl_Position.xyzw;
	v2f_clipCoord.xy = (v2f_clipCoord.xy + v2f_clipCoord.ww) * 0.5;

#ifdef PERFORATED
	v2f_texCoord.x = dot(textureMatrixS, vec4(in_st, 0.0, 1.0));
	v2f_texCoord.y = dot(textureMatrixT, vec4(in_st, 0.0, 1.0));
#endif
}
